// Code generated by MockGen. DO NOT EDIT.
// Source: dao/productDao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-commodity-mservice/server/repository/model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockProductDao is a mock of ProductDao interface.
type MockProductDao struct {
	ctrl     *gomock.Controller
	recorder *MockProductDaoMockRecorder
}

// MockProductDaoMockRecorder is the mock recorder for MockProductDao.
type MockProductDaoMockRecorder struct {
	mock *MockProductDao
}

// NewMockProductDao creates a new mock instance.
func NewMockProductDao(ctrl *gomock.Controller) *MockProductDao {
	mock := &MockProductDao{ctrl: ctrl}
	mock.recorder = &MockProductDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductDao) EXPECT() *MockProductDaoMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductDao) CreateProduct(ctx context.Context, product *model.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductDaoMockRecorder) CreateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductDao)(nil).CreateProduct), ctx, product)
}

// GetProductByID mocks base method.
func (m *MockProductDao) GetProductByID(ctx context.Context, id int) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductDaoMockRecorder) GetProductByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductDao)(nil).GetProductByID), ctx, id)
}

// UpdateProduct mocks base method.
func (m *MockProductDao) UpdateProduct(ctx context.Context, product *model.Product, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductDaoMockRecorder) UpdateProduct(ctx, product, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductDao)(nil).UpdateProduct), ctx, product, tx)
}

// UpdateProductStatus mocks base method.
func (m *MockProductDao) UpdateProductStatus(ctx context.Context, id, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStatus indicates an expected call of UpdateProductStatus.
func (mr *MockProductDaoMockRecorder) UpdateProductStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStatus", reflect.TypeOf((*MockProductDao)(nil).UpdateProductStatus), ctx, id, status)
}

// UpdateProductStock mocks base method.
func (m *MockProductDao) UpdateProductStock(ctx context.Context, id, stock int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStock", ctx, id, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStock indicates an expected call of UpdateProductStock.
func (mr *MockProductDaoMockRecorder) UpdateProductStock(ctx, id, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStock", reflect.TypeOf((*MockProductDao)(nil).UpdateProductStock), ctx, id, stock)
}
