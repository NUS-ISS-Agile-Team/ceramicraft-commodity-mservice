// Code generated by MockGen. DO NOT EDIT.
// Source: dao/shopping_cart_item.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-commodity-mservice/server/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockShoppingCartItemDao is a mock of ShoppingCartItemDao interface.
type MockShoppingCartItemDao struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingCartItemDaoMockRecorder
}

// MockShoppingCartItemDaoMockRecorder is the mock recorder for MockShoppingCartItemDao.
type MockShoppingCartItemDaoMockRecorder struct {
	mock *MockShoppingCartItemDao
}

// NewMockShoppingCartItemDao creates a new mock instance.
func NewMockShoppingCartItemDao(ctrl *gomock.Controller) *MockShoppingCartItemDao {
	mock := &MockShoppingCartItemDao{ctrl: ctrl}
	mock.recorder = &MockShoppingCartItemDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingCartItemDao) EXPECT() *MockShoppingCartItemDaoMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockShoppingCartItemDao) CreateItem(ctx context.Context, item *model.ShoppingCartItem) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockShoppingCartItemDaoMockRecorder) CreateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockShoppingCartItemDao)(nil).CreateItem), ctx, item)
}

// DeleteByProductIds mocks base method.
func (m *MockShoppingCartItemDao) DeleteByProductIds(ctx context.Context, userId int, productIds []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProductIds", ctx, userId, productIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByProductIds indicates an expected call of DeleteByProductIds.
func (mr *MockShoppingCartItemDaoMockRecorder) DeleteByProductIds(ctx, userId, productIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProductIds", reflect.TypeOf((*MockShoppingCartItemDao)(nil).DeleteByProductIds), ctx, userId, productIds)
}

// DeleteItemById mocks base method.
func (m *MockShoppingCartItemDao) DeleteItemById(ctx context.Context, id, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemById", ctx, id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemById indicates an expected call of DeleteItemById.
func (mr *MockShoppingCartItemDaoMockRecorder) DeleteItemById(ctx, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemById", reflect.TypeOf((*MockShoppingCartItemDao)(nil).DeleteItemById), ctx, id, userId)
}

// GetItemById mocks base method.
func (m *MockShoppingCartItemDao) GetItemById(ctx context.Context, id int) (*model.ShoppingCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", ctx, id)
	ret0, _ := ret[0].(*model.ShoppingCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockShoppingCartItemDaoMockRecorder) GetItemById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockShoppingCartItemDao)(nil).GetItemById), ctx, id)
}

// QueryItems mocks base method.
func (m *MockShoppingCartItemDao) QueryItems(ctx context.Context, query *model.ShoppingCartItem) ([]*model.ShoppingCartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryItems", ctx, query)
	ret0, _ := ret[0].([]*model.ShoppingCartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryItems indicates an expected call of QueryItems.
func (mr *MockShoppingCartItemDaoMockRecorder) QueryItems(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryItems", reflect.TypeOf((*MockShoppingCartItemDao)(nil).QueryItems), ctx, query)
}

// UpdateItem mocks base method.
func (m *MockShoppingCartItemDao) UpdateItem(ctx context.Context, item *model.ShoppingCartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockShoppingCartItemDaoMockRecorder) UpdateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockShoppingCartItemDao)(nil).UpdateItem), ctx, item)
}
