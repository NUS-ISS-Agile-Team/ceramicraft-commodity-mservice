// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
)

// S3Proxy is an autogenerated mock type for the S3Proxy type
type S3Proxy struct {
	mock.Mock
}

// GenPutPresignRequest provides a mock function with given fields: ctx, bucketName, objectKey, lifetimeSecs
func (_m *S3Proxy) GenPutPresignRequest(ctx context.Context, bucketName string, objectKey string, lifetimeSecs int64) (*v4.PresignedHTTPRequest, error) {
	ret := _m.Called(ctx, bucketName, objectKey, lifetimeSecs)

	if len(ret) == 0 {
		panic("no return value specified for GenPutPresignRequest")
	}

	var r0 *v4.PresignedHTTPRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (*v4.PresignedHTTPRequest, error)); ok {
		return rf(ctx, bucketName, objectKey, lifetimeSecs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *v4.PresignedHTTPRequest); ok {
		r0 = rf(ctx, bucketName, objectKey, lifetimeSecs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v4.PresignedHTTPRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, bucketName, objectKey, lifetimeSecs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewS3Proxy creates a new instance of S3Proxy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3Proxy(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3Proxy {
	mock := &S3Proxy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
